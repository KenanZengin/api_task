import { Suspense, useEffect, useState } from 'react';
import { Link, redirect, useNavigate } from 'react-router-dom'
import useSWR from 'swr';
import { PostType } from '../../types';
import { Grid, Menu, MenuItem, Popover, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';
import { BiGridAlt } from "react-icons/bi";
import { PiSlidersHorizontal } from "react-icons/pi";
import { IoGrid } from "react-icons/io5";
import { LuList } from "react-icons/lu";
import { IoSearchOutline } from "react-icons/io5";


const Home = () => {

  const { data , error } = useSWR('https://jsonplaceholder.typicode.com/posts');

  const [postData,setPostData] = useState<undefined | PostType[]>(undefined);
  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);
  const [selectedMode, setSelectedMode] = useState<string>("reset");
  const [searchTerm,setSearchTerm] = useState<string>("")

  const open = Boolean(anchorEl);
  const navigate = useNavigate();

  useEffect(()=>{
    console.log("AMM FOURTHH");

    // if(false){
    //   navigate('/login');
    //   return
    // }   
    setPostData(() => data)
    
  },[data])
  
  if(error){
    return(<h1>Error...</h1>)
  }

  const filterMode = (mode:string, search?:string, noSearch?:string):PostType[] => {


    setAnchorEl(() => null);

    let filtered:PostType[] = data;
    let searchLetter = search || searchTerm;

    if(mode === "silver"){
      filtered = filtered?.filter((item) => (item.id) % 2 === 0 && (item.id) % 6 !== 0);
    }else if(mode === "gold"){
      filtered = filtered?.filter((item) => (item.id) % 3 === 0  && (item.id) % 6 !== 0);
    }else if(mode === "platinum"){
      filtered = filtered?.filter((item) => (item.id) % 6 === 0);
    }else if(mode === "diamond"){
      filtered = filtered?.filter((item) => (item.id) % 3 !== 0 && (item.id) % 2 !== 0);
    }else if(mode === "reset"){
      filtered = data;  
    }

    if(searchLetter && noSearch !== "nofound"){
      filtered = filtered?.filter(item => item.title.toLowerCase().includes(searchLetter.toLowerCase()) || item.body.toLowerCase().includes(searchLetter.toLocaleLowerCase()));
    }
    setPostData(() => filtered);
    setSelectedMode(() => mode);

    return filtered
  };

  const selectStatus = (id: number) => {

    if(id % 2 === 0 && id % 6 !== 0 ){
      return "silver"
    }else if(id % 3 === 0 && id % 6 !== 0 ){
      return "gold"
    }else if(id % 6 === 0){
      return "platinum"
    }else if(id % 3 !== 0 && id % 2 !== 0 ){
      return "diamond"
    }
    return "no status"

  }

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {

    setSearchTerm(() => e.target.value.trim());
    console.log(typeof e.target.value);
    
    let filtered:PostType[] = filterMode(selectedMode,e.target.value.trim());
    console.log(filtered);
    
    if(filtered.length === 0 && e.target.value.length === 0 || e.target.value.length === 0){
      console.log("COME??");
      filtered = filterMode(selectedMode,e.target.value.trim(), "nofound");
    }

    setPostData(() => filtered);
    
  }


  return (
    <main className="home_page">

      <button style={{backgroundColor:"green",padding:10,margin:20}}>20</button>
      <button style={{backgroundColor:"green",padding:10,margin:20}}>50</button>
      <div className="options_post">
        <div className="list_type">
          <BiGridAlt size={18} />
          Posts
        </div>
        <div className="option_list">
          <div className="search_post">
            <label htmlFor="search">
              <IoSearchOutline size={20} />
              <input type="text" id='search' placeholder='Search Posts...' value={searchTerm} onChange={handleChange} />
            </label>
          </div>
          <div className='filters'>
            <button
              onClick={(event: React.MouseEvent<HTMLButtonElement>) =>{setAnchorEl(event.currentTarget);}}
            >
              <PiSlidersHorizontal size={20} />
              Filters
            </button>
            <Menu
              id="filter-Menu"
              open={open}
              anchorEl={anchorEl}
              onClose={() => setAnchorEl(() => null)}
              anchorOrigin={{
                vertical: 'bottom',
                horizontal: "left",
              }}
              disableScrollLock={true}
            >
              <MenuItem onClick={() => filterMode("silver")}>
                <p className='menu_item'>
                  <span className="silver"></span>
                  Silver Statüs
                </p>
              </MenuItem>
              <MenuItem onClick={() => filterMode("gold")}>
                <p className="menu_item">
                  <span className="gold"></span>
                  Gold Statüs
                </p>
              </MenuItem>
              <MenuItem onClick={() => filterMode("platinum")}>
                <p className='menu_item'>
                  <span className="platinum"></span>
                  Platinum Statüs
                </p>
              </MenuItem>
              <MenuItem onClick={() => filterMode("diamond")}>
                <p className='menu_item'>
                  <span className="diamond"></span>
                  Diamond Statüs
                </p>
              </MenuItem>
              <MenuItem onClick={() => filterMode("reset")}>
                <p className='menu_item'>
                  <span className="reset"></span>
                  Reset filter
                </p>
              </MenuItem>
            </Menu>
          </div>
          <div className="list_mode">
            <div className='list_type'>
              <IoGrid size={22} />
            </div>
            <div className='list_type'>
              <LuList size={22} />
            </div>
          </div>
        </div>
      </div>

      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell> Statüs </TableCell>
              <TableCell> İçerik ID </TableCell>
              <TableCell width={300}>Başlık</TableCell>
              <TableCell width={400}>İçerik</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {postData?.map((item:any)=>{
              const statu = selectStatus(item.id);
              return(
                <TableRow key={item.id}>
                  <TableCell user-statu={statu} className="user_statu"> 
                    <span ></span> 
                  </TableCell>
                  <TableCell> {item.id} </TableCell>
                  <TableCell width={350}> {item.title} </TableCell>
                  <TableCell width={450}> {item.body} </TableCell>
                </TableRow>
              )
            })}
          </TableBody>
        </Table>  
      </TableContainer>     
    </main>
  )
}

export default Home


export const Loading = () => {
  return(
    <h1>Loading...</h1>
  )
}